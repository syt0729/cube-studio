
# Source: volcano/templates/admission.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: volcano-admission
  namespace: kubeflow
---
# Source: volcano/templates/admission.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: volcano-admission-configmap
  namespace: kubeflow
data:
  volcano-admission.conf: |
    #resourceGroups:
    #- resourceGroup: management                    # set the resource group name
    #  object:
    #    key: namespace                             # set the field and the value to be matched
    #    value:
    #    - mng-ns-1
    #  schedulerName: default-scheduler             # set the scheduler for patching
    #  tolerations:                                 # set the tolerations for patching
    #  - effect: NoSchedule
    #    key: taint
    #    operator: Exists
    #  labels:
    #    volcano.sh/nodetype: management           # set the nodeSelector for patching
    #- resourceGroup: cpu
    #  object:
    #    key: annotation
    #    value:
    #    - "volcano.sh/resource-group: cpu"
    #  schedulerName: volcano
    #  labels:
    #    volcano.sh/nodetype: cpu
    #- resourceGroup: gpu                          # if the object is unsetted, default is:  the key is annotation,
    #  schedulerName: volcano                      # the annotation key is fixed and is "volcano.sh/resource-group", The corresponding value is the resourceGroup field
    #  labels:
    #    volcano.sh/nodetype: gpu
---
# Source: volcano/templates/admission.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: volcano-admission
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "create", "update"]
  # Rules below is used generate admission service secret
  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests"]
    verbs: ["get", "list", "create", "delete"]
  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests/approval"]
    verbs: ["create", "update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "patch"]
  - apiGroups: ["scheduling.incubator.k8s.io", "scheduling.volcano.sh"]
    resources: ["queues"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get"]
  - apiGroups: ["scheduling.incubator.k8s.io", "scheduling.volcano.sh"]
    resources: ["podgroups"]
    verbs: ["get", "list", "watch"]
---
# Source: volcano/templates/admission.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: volcano-admission-role
subjects:
  - kind: ServiceAccount
    name: volcano-admission
    namespace: kubeflow
roleRef:
  kind: ClusterRole
  name: volcano-admission
  apiGroup: rbac.authorization.k8s.io
---
# Source: volcano/templates/admission.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: volcano-admission
  name: volcano-admission-service
  namespace: kubeflow
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    app: volcano-admission
  sessionAffinity: None
---
## Source: volcano/templates/admission.yaml
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  labels:
#    app: volcano-admission
#  name: volcano-admission
#  namespace: kubeflow
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: volcano-admission
#  template:
#    metadata:
#      labels:
#        app: volcano-admission
#    spec:
#      serviceAccount: volcano-admission
#      containers:
#        - args:
#            - --tls-cert-file=/admission.local.config/certificates/tls.crt
#            - --tls-private-key-file=/admission.local.config/certificates/tls.key
#            - --ca-cert-file=/admission.local.config/certificates/ca.crt
#            - --admission-conf=/admission.local.config/configmap/volcano-admission.conf
#            - --webhook-namespace=kubeflow
#            - --webhook-service-name=volcano-admission-service
#            - --logtostderr
#            - --port=8443
#            - -v=4
#            - 2>&1
#          image: volcanosh/vc-webhook-manager:v1.7.0
#          imagePullPolicy: IfNotPresent
#          name: admission
#          volumeMounts:
#            - mountPath: /admission.local.config/certificates
#              name: admission-certs
#              readOnly: true
#            - mountPath: /admission.local.config/configmap
#              name: admission-config
#      volumes:
#        - name: admission-certs
#          secret:
#            defaultMode: 420
#            secretName: volcano-admission-secret
#        - name: admission-config
#          configMap:
#            name: volcano-admission-configmap
---
## Source: volcano/templates/admission.yaml
#apiVersion: batch/v1
#kind: Job
#metadata:
#  name: volcano-admission-init
#  namespace: kubeflow
#  labels:
#    app: volcano-admission-init
#spec:
#  backoffLimit: 3
#  template:
#    spec:
#      serviceAccountName: volcano-admission
#      restartPolicy: Never
#      containers:
#        - name: main
#          image: volcanosh/vc-webhook-manager:v1.7.0
#          imagePullPolicy: IfNotPresent
#          command: ["./gen-admission-secret.sh", "--service", "volcano-admission-service", "--namespace",
#                    "kubeflow", "--secret", "volcano-admission-secret"]

---
# Source: volcano/templates/controllers.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: volcano-controllers
  namespace: kubeflow
---
# Source: volcano/templates/controllers.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: volcano-controllers
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "get", "list", "watch", "delete"]
  - apiGroups: ["batch.volcano.sh"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch", "update", "delete"]
  - apiGroups: ["batch.volcano.sh"]
    resources: ["jobs/status", "jobs/finalizers"]
    verbs: ["update", "patch"]
  - apiGroups: ["bus.volcano.sh"]
    resources: ["commands"]
    verbs: ["get", "list", "watch", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["create", "get", "list", "watch", "update", "bind", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "create"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["scheduling.incubator.k8s.io", "scheduling.volcano.sh"]
    resources: ["podgroups", "queues", "queues/status"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["scheduling.k8s.io"]
    resources: ["priorityclasses"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["networkpolicies"]
    verbs: ["get", "create", "delete"]
---
# Source: volcano/templates/controllers.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: volcano-controllers-role
subjects:
  - kind: ServiceAccount
    name: volcano-controllers
    namespace: kubeflow
roleRef:
  kind: ClusterRole
  name: volcano-controllers
  apiGroup: rbac.authorization.k8s.io
---
# Source: volcano/templates/controllers.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: volcano-controllers
  namespace: kubeflow
  labels:
    app: volcano-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: volcano-controller
  template:
    metadata:
      labels:
        app: volcano-controller
    spec:
      serviceAccount: volcano-controllers
      containers:
          - name: volcano-controllers
            image: volcanosh/vc-controller-manager:v1.7.0
            args:
              - --logtostderr
              - -v=4
              - 2>&1
            imagePullPolicy: IfNotPresent
---
# Source: volcano/templates/scheduler.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: volcano-scheduler
  namespace: kubeflow
---
# Source: volcano/templates/scheduler.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: volcano-scheduler-configmap
  namespace: kubeflow
data:
  volcano-scheduler.conf: |
    actions: "enqueue, allocate, backfill"
    tiers:
    - plugins:
      - name: priority
      - name: gang
      - name: conformance
    - plugins:
      - name: overcommit
      - name: drf
      - name: predicates
      - name: proportion
      - name: nodeorder
      - name: binpack
---
# Source: volcano/templates/scheduler.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: volcano-scheduler
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "get", "list", "watch", "delete"]
  - apiGroups: ["batch.volcano.sh"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch", "update", "delete"]
  - apiGroups: ["batch.volcano.sh"]
    resources: ["jobs/status"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["pods", "pods/status"]
    verbs: ["create", "get", "list", "watch", "update", "patch", "bind", "updateStatus", "delete"]
  - apiGroups: [""]
    resources: ["pods/binding"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["list", "watch", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["resourcequotas"]
    verbs: ["list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list", "watch"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["list", "watch"]
  - apiGroups: ["scheduling.k8s.io"]
    resources: ["priorityclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["scheduling.incubator.k8s.io", "scheduling.volcano.sh"]
    resources: ["queues"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["scheduling.incubator.k8s.io", "scheduling.volcano.sh"]
    resources: ["podgroups"]
    verbs: ["list", "watch", "update"]
  - apiGroups: ["nodeinfo.volcano.sh"]
    resources: ["numatopologies"]
    verbs: ["get", "list", "watch", "delete"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create", "delete", "update"]
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
# Source: volcano/templates/scheduler.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: volcano-scheduler-role
subjects:
  - kind: ServiceAccount
    name: volcano-scheduler
    namespace: kubeflow
roleRef:
  kind: ClusterRole
  name: volcano-scheduler
  apiGroup: rbac.authorization.k8s.io
---
# Source: volcano/templates/scheduler.yaml
apiVersion: v1
kind: Service
metadata:
#  annotations:
#    prometheus.io/path: /metrics
#    prometheus.io/port: "8080"
#    prometheus.io/scrape: "true"
  name: volcano-scheduler-service
  namespace: kubeflow
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: volcano-scheduler
  type: ClusterIP
---
# Source: volcano/templates/scheduler.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: volcano-scheduler
  namespace: kubeflow
  labels:
    app: volcano-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: volcano-scheduler
  template:
    metadata:
      labels:
        app: volcano-scheduler
    spec:
      serviceAccount: volcano-scheduler
      containers:
        - name: volcano-scheduler
          image: volcanosh/vc-scheduler:v1.7.0
          args:
            - --logtostderr
            - --scheduler-conf=/volcano.scheduler/volcano-scheduler.conf
            - -v=3
            - 2>&1
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: scheduler-config
              mountPath: /volcano.scheduler
      volumes:
        - name: scheduler-config
          configMap:
            name: volcano-scheduler-configmap

---
